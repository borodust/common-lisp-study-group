* Символы

Любой символ принадлежит какому либо пакету. Пакет - это просто набор символов. Полное имя
символа состоит из двух частей.
#+BEGIN_SRC lisp
  cl-study::run
#+END_SRC

- =cl-study= - имя пакета
- =::= - разделитель имени пакета и имени символа
- =run= - имя символа

Чтобы каждый раз не приходилось использовать полное имя символа вместе с пакетом, мы используем
функцию =in-package=
#+BEGIN_SRC lisp
  (in-package :cl-study)
#+END_SRC
После выполнения данной команды все символы, для которых мы явно не указали пакет, будут браться
из пакета =cl-study=.

Если в полном имени символа отсутствует имя пакета, как например в =:cl-study= или =::cl-study=
(что равнозначно, в данной ситуации), то этот символ берется из специального пакета =:keyword=.

* Редактор Portacle (Emacs)

После полного запуска Portacle, должна появится следующая строка:
#+BEGIN_SRC lisp
CL-USER>
#+END_SRC
Это называется REPL - Read-Eval-Print-Loop. Здесь мы вводим команды Lisp'а и получаем ответы.
=CL-USER= в этом случае - имя пакета, который сейчас активен и из которого по умолчанию будут
браться символы, если мы не будем указывать пакета.

Окно Portacle делится на буферы. Буфер - это, грубо говоря, файл, который мы редактируем, или, к
примеру, наш REPL - это тоже буфер. В самом низу есть минибуфер (так и называется) - строка, где
мы вводим различные команды для управления самим Portacle, используя комбинацию =M-x=.

** Комбинации клавиш

Расшифровка:
- Большая =C= в =C-x= - это =Control= (Control key), =M= в =M-x= - это =Alt= (M от слова Meta:
  Meta key), =RET= - =Enter= (Return key), =ESC= - =Escape=.
- Дефис в комбинации означает, что клавиши должны быть зажаты вместе
- Пробел разделяет группы клавиш
- =<= и =>= означают, что надо ввести какой-то текст в минибуфере

Например, комбинация =С-x C-f <путь_к_файлу> RET= - (найти файл) состоит из четырех групп:
=C-x=, =C-f=, =<путь_к_файлу>= и =RET=, что значит: зажимаем Control и x (первая группа),
отпускаем все клавиши [fn:1] (разделитель групп), зажимаем Control и f - в минибуфере появится
предложение ввести путь к существующему файлу или дать имя новому файлу, после ввода нажимаем
Enter (группа =RET=). Для простоты все это можно представить себе как комбо в играх :)

- =C-g= или =ESC ESC ESC= - отменить начатую комбинацию

- =С-x C-f <путь_к_файлу> RET= - открыть файл =<путь_к_файлу>=
- =C-x C-s= - сохранить текущий файл/буфер
- =С-x C-c= - выйти из редактора

- =M-w= - скопировать текст
- =C-y= - вставить текст
- =C-/= - отменить последний ввод
- =C-g C-/= - повторить последний ввод

- =C-x 1= - закрыть все окна, кроме того, в котором находится курсор
- =С-x C-b= - открыть список всех буферов в новом окне
- =С-x b <имя_буфера> RET= - найти буфер по имени

* Файлы исходного кода

Создаем файл с расширением =.lisp= (См. meeting2.lisp). Копируем туда
#+BEGIN_SRC lisp :tangle meeting2.lisp
  (in-package :cl-study)

  (defparameter x 100)
  (defparameter y 100)

  (defsketch second-rect
    (draw-rect (vec2 x y) 100 100 :fill-paint (vec4 (/ x 1000) 0 (/ y 1000) 1)))
#+END_SRC

Сохраняем файл. Теперь мы можем загрузить его в нашу программу с помощью команды =(load ...)=. В
нашем REPL-буфере выполним:
#+BEGIN_SRC lisp :eval no
  (load "c:/путь/к/файлу.lisp")
#+END_SRC

Теперь можно менять нашу программу прямо на лету, не копируя ничего в REPL. К примеру,
изменим значение =x= прямо в файле:
#+BEGIN_SRC :eval no
  (defparameter x 200)
#+END_SRC
Переместим курсор либо внутрь этой формы, либо сразу за форму и нажмем =C-c C-c=. Voila, наш
квадрат изменил положение и цвет! Для простоты можно представить, что эта комбинация копирует
форму под текстовым курсором и вставляет в наш REPL автоматически.


------------------------------------------------
[fn:1] Control в этой ситуации отпускать необязательно, потому что это клавиша-модификатор, но
для простоты можно запомнить, что отпускать нужно все клавиши в группе
